(print "Initializing module namespaces")
(load "./namespaces/ns.repl")

(print "Testing electric-dao contracts")
(load "./dao/tests/init.repl")

(begin-tx "Create Plot for collection")
  (use marmalade.ledger)
  (use marmalade.policy-manager)
  (use marmalade.collection-policy-v1)
  (use test.energetic-constants)

  (env-data
    {
      'collection-id: "collection:DEulkJ-qDySv_BFKQvJEj315-x5JdnFObku8DXk4iKI",
      'cp-mint-guard: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      'nfp-mint-guard: {
        'keys: ["dao"],
        'pred: "keys-all"
      }
    }
  )

  (let
    (
      (plot-one-id:string (create-token-id { 'uri: "plot-1-uri", 'precision: 0, 'policies: test.energetic-constants.PLOT_COLLECTION_POLICIES }))
    )
    (expect-failure "Cannot create a plot #1 without operator guard"
      "Keyset failure (keys-all): [dao]"
      (create-token plot-one-id 0 "plot-1-uri" test.energetic-constants.PLOT_COLLECTION_POLICIES)
    )
  )
(rollback-tx)


(begin-tx "Create Plot for collection")
  (use marmalade.ledger)
  (use marmalade.policy-manager)
  (use marmalade.collection-policy-v1)
  (use test.energetic-manifest-policy)
  (use test.energetic-constants)

  (env-data
    {
      'dao: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      'dao-manifest-upgrader: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      'cp-mint-guard: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      'nfp-mint-guard: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      'plot-one-token-id: (create-token-id { 'uri: "plot-1-uri", 'precision: 0, 'policies: test.energetic-constants.PLOT_COLLECTION_POLICIES }),
      'item-manifest: {
        'manifest: test.energetic-constants.PLOT_MANIFEST,
        'guard: {
          'keys: ["dao"],
          'pred: "keys-all"
        }
      },
      "collection-id": "collection:DEulkJ-qDySv_BFKQvJEj315-x5JdnFObku8DXk4iKI",
      'ns: "test",
      'upgrade: false
    }
  )

  (env-sigs
    [
      {
        'key: 'dao,
        'caps: [
          (marmalade.collection-policy-v1.OPERATOR (read-msg "collection-id"))
          (test.energetic-manifest-policy.UPGRADE "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw")
        ]
      }
    ]
  )

  (expect "Create a Plot token"
    true
    (create-token (read-msg "plot-one-token-id") 0 "plot-1-uri" test.energetic-constants.PLOT_COLLECTION_POLICIES)
  )

  (expect "Update the manifest of the Plot token"
    "Write succeeded"
    (upgrade-manifest (read-msg 'plot-one-token-id ) (at 'manifest (read-msg 'item-manifest )))
  )

  (expect "Validate energetic-plot collection"
    {
      "id": "collection:DEulkJ-qDySv_BFKQvJEj315-x5JdnFObku8DXk4iKI",
      "max-size": 5,
      "name": "energetic-plots",
      "operator-guard": (read-msg "cp-mint-guard"),
      "size": 1
    }
    (marmalade.collection-policy-v1.get-collection "collection:DEulkJ-qDySv_BFKQvJEj315-x5JdnFObku8DXk4iKI")
  )
(commit-tx)

(begin-tx "Minting plots in energetic-dao collection")
  (use marmalade.ledger)
  (use marmalade.policy-manager)
  (use marmalade.collection-policy-v1)

  (env-data
    {
      'dao: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      'cp-mint-guard: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      'nfp-mint-guard: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      "collection-id": "collection:DEulkJ-qDySv_BFKQvJEj315-x5JdnFObku8DXk4iKI"
    }
  )

  (env-sigs 
    [
      {
        'key: 'dao,
        'caps: [
          (marmalade.ledger.MINT "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw" "k:dao" 1.0)
          (marmalade.collection-policy-v1.MINT "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw")
          (marmalade.non-fungible-policy-v1.MINT "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw")
        ]
      }
    ]
  )

  (expect "Minting Plot #1"
    true
    (marmalade.ledger.mint "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw" "k:dao" (read-keyset "cp-mint-guard") 1.0)
  )

(commit-tx)

(begin-tx "Minting plot validation in energetic-dao collection")
  (use marmalade.ledger)
  (use marmalade.policy-manager)
  (use marmalade.collection-policy-v1)

  (env-data
    {
      'dao: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      'cp-mint-guard: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      'nfp-mint-guard: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      "collection-id": "collection:DEulkJ-qDySv_BFKQvJEj315-x5JdnFObku8DXk4iKI"
    }
  )

  (env-sigs 
    [
      {
        'key: 'dao,
        'caps: [
          (marmalade.ledger.MINT "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw" "k:dao" 5.0)
          (marmalade.ledger.MINT "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw" "k:dao" 1.0)
          (marmalade.collection-policy-v1.MINT "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw")
          (marmalade.non-fungible-policy-v1.MINT "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw")
        ]
      }
    ]
  )

  (expect-failure "Minting multiple Plot #1"
    "Mint can only be 1"
    (marmalade.ledger.mint "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw" "k:dao" (read-keyset "cp-mint-guard") 5.0)
  )

  (expect-failure "Minting duplicate Plot #1"
    "Only one mint allowed"
    (marmalade.ledger.mint "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw" "k:dao" (read-keyset "cp-mint-guard") 1.0)
  )
(rollback-tx)

(begin-tx "Setting coin balances")
  (env-data
    {
      'dao: {
          'keys: ["dao"],
          'pred: "keys-all"
      },
      'user: {
        'keys: ["user"],
        'pred: "keys-all"
      }
    }
  )

  (env-sigs 
    [
      { 
        'key: "admin",
        'caps: [
          (coin.COINBASE)
        ]
      },
      { 
        'key: "user",
        'caps: [
          (coin.COINBASE)
        ]
      }
    ]
  )
  (test-capability (coin.COINBASE ))
  (coin.create-account "k:dao" (read-keyset "dao"))
  (coin.create-account "k:user" (read-keyset "user"))

  (coin.coinbase "k:user" (read-keyset "user") 100.0)

  (expect "k:user balance is 100.0" (coin.get-balance "k:user") 100.0)
  (expect "k:dao balance is 0.0" (coin.get-balance "k:dao") 0.0)
(commit-tx)

(begin-tx "Marketplace actions for Plot energetic-plots collection")
  (use marmalade.ledger)
  (use marmalade.policy-manager)
  (use marmalade.collection-policy-v1)
  (use marmalade.fungible-quote-policy-v1)

  (env-data
    {
      'dao: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      'user: {
        'keys: ["user"],
        'pred: "keys-all"
      },
      "quote": {
        'fungible: coin,
        'price: 100.0,
        'recipient: "k:dao",
        'recipient-guard: {
          'keys: ["dao"], 
          'pred: "keys-all"
        }
      },
      'marketplace-fee: {
        'marketplace-account: "",
        'mk-fee-percentage: 0.0
      },
      'buyer: "k:user",
      'buyer-guard: { 
        'keys: ["user"],
        'pred: "keys-all"
      },
      "collection-id": "collection:DEulkJ-qDySv_BFKQvJEj315-x5JdnFObku8DXk4iKI"
    }
  )

  (env-sigs 
    [
      {
        'key: 'dao,
        'caps: [
          (marmalade.ledger.OFFER "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw" "k:dao" 1.0 (time "2024-05-23T00:00:00Z"))
        ]
      },
      {
        'key: 'user,
        'caps: [
          (BUY "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw" "k:dao" "k:user"  1.0 (time "2024-05-23T00:00:00Z") "DldRwCblQ7Loqy6wYJnaodHl30d3j3eH-qtFzfEv46g")
          (coin.TRANSFER "k:user" "c:0ChSqSoWjhPTv0RdCeEqRZFdlz4RS1sbLc6og9V9P8A" 100.0)
        ]
      }
    ]
  )

  (expect "Setting Quote as DAO for plot #1"
    true
    (marmalade.ledger.sale "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw" "k:dao" 1.0 (time "2024-05-23T00:00:00Z"))
  )

  (expect "Buying Quote from DAO as User for plot #1"
    true
    (continue-pact 1)
  )
  
  (expect "k:user balance of Plot #1 to be 1.0"
    1.0
    (marmalade.ledger.get-balance "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw" "k:user")
  )

  (expect "k:user balance of coin to be 0.0"
    0.0
    (coin.get-balance "k:user")
  )

  (expect "k:dao balance of Plot #1 to be 0.0"
    0.0
    (marmalade.ledger.get-balance "t:8FZFf-y--ZSWwTuERux5v0wYPAWbYeCv9rNGlpkTPgw" "k:dao")
  )

  (expect "k:dao balance of coin to be 100.0"
    100.0
    (coin.get-balance "k:dao")
  )
  (get-tokens)
(commit-tx)