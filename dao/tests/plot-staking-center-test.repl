(begin-tx "Lock plot token in staking pool")
  (use marmalade.ledger)
  (use marmalade.policy-manager)
  (use marmalade.collection-policy-v1)
  (use test.energetic-constants)
  (use test.energetic-plot-staking-center)

  (env-data
    {
      'dao: {
        'keys: ["dao"],
        'pred: "keys-all"
      },
      'user: {
        'keys: ["user"],
        'pred: "keys-all"
      }
    }
  )

  (env-sigs
    [
      {
        'key: 'dao,
        'caps: []
      },
      {
        'key: 'user,
        'caps: [
          (marmalade.ledger.TRANSFER PLOT_ONE_TOKEN_ID "k:user" PLOT_STAKING_CENTER_ESCROW_ACCOUNT 1.0),
          (test.energetic-plot-staking-center.UNSTAKE PLOT_ONE_TOKEN_ID "k:user")
        ]
      }
    ]
  )

  (expect "Lock plot token in staking center"
    {
        'escrow-account: PLOT_STAKING_CENTER_ESCROW_ACCOUNT,
        'original-owner: "k:user",
        'guard: (read-keyset "user") 
    }
    (test.energetic-plot-staking-center.lock-plot PLOT_ONE_TOKEN_ID 1.0 "k:user" (read-keyset "user"))
  )

  (expect "Plot to be stored in escrow account after lock"
    1.0
    (marmalade.ledger.get-balance PLOT_ONE_TOKEN_ID PLOT_STAKING_CENTER_ESCROW_ACCOUNT)
  )

  (expect "Plot to be removed from owner's account after lock"
    0.0
    (marmalade.ledger.get-balance PLOT_ONE_TOKEN_ID "k:user")
  )

  (expect "Unlock plot token in staking center"
    true
    (test.energetic-plot-staking-center.unlock-plot PLOT_ONE_TOKEN_ID 1.0 "k:user")
  )

  (expect "Plot to be removed from escrow account after unlock"
    0.0
    (marmalade.ledger.get-balance PLOT_ONE_TOKEN_ID PLOT_STAKING_CENTER_ESCROW_ACCOUNT)
  )

  (expect "Plot to be restored in owner's account after unlock"
    1.0
    (marmalade.ledger.get-balance PLOT_ONE_TOKEN_ID "k:user")
  )
(commit-tx)